OOpreport.txt

1.OOP(Object Oriented Programming)- 객체지향 프로그래밍 
	현실세계의 사물을 추상화하고 캡슐화하며, 계층구조는 상속시키며, 부모와 다른 자식의
	특성, 행위는 다형성으로 구현하는것, 객체의 구성으로 프로그램을 만들어 
	나가는것을 객체지향 프로그래밍이라고 함 
2.Object
	현실세계를 표현하는 대상, 식별성을 가짐, 구체적인 사물도있고, 추상적일 수도있다.
	*클래스를 실제 사용할 수 있도록 변수 선언한 것을 인스턴스고 , 이 인스턴스를 객체라 할 수 있다.
	*ex) 기차역에서 승차권을 발매하는 경우, 실체인 '손님'과 동작인 '승차권 주문' 은 하나의 객체이며, 실체인 '역무원'과 동작인 '승차권 발매'도 하나의 객체 
3.Class
	유사한 특징을 지닌 객체들의 속성을 묶어 놓은 집합체 .
	구체적 일반적으로 만들 수 있다. 
	예를들어 코끼리, 원숭이, 사자 등의 특성을 공통된 분모로 하나로 묶어주는것.
	동물이라고 할 수 있다.
	더 나아가 정의된 클래스로부터 하나의 실례를 만드는것을 '객체 또는 인스턴스를 생성한다'

4. abstraction 
	추상화 
	
	
5_1. Generalization 
	is a /사람은 동물이다 
	Super class의 특성을 sub class가 상속받는다는 특성을 "일반화"
5_2. Inheritance
	*객체지향 개념은 클래스를 이용하여 다른 클래스를 생성 또는 정의할 수 있다. 하위 클래스는 상위클래스가 갖고있는 모든 특성들을 상속하여 사용할 수 있다. 이러한 상속 관계를 트리로 나타낼 수 있고, 이 상속관계 트리를 클래스 계층도 hierarchy라고 한다. 상속의 장점은 상위클래스는 하위클래스들이 가질 수 있는 일반적인 상태와 행동을 정의하고, 하위클래스는 하위클래스 만이 갖는 특별한 상태와 행동을 정의하도록 함으로써 상위클래스를 여러 하위클래스들이 재사용할 수 있다. 
	(= 재 사용성, 확장) 상위 클래스에 정의한 속성을 재사용, 확장하혀 개발속도 개선 
6. Specilaization
	상속받으면서 부모의 기능에다가 기능을 추가시키며 세분화 
7. Realization
	is a/ a사제품은 k회사 제품 

	인터페이스 상속, 구현 (implement 키워드, 시행하다)
8. Association 
	*has a 중요한관계 / ex)여자친구, 남자친구 
	연관관계 - 클래스로 생성된 객체간의 연관관계 다른 클래스의 변수나 메소드  혹은 객체를 참조 표현하고자할 경우 
	role name 사용 
9. dependency 
	*사용의 관계 / ex)강의하다를 하면서 보드마카로 판서하는중. 강의하는 행동이 끝나면 보드마카 놓고 집에감 
	필요에의해서 쓰고 버리는 관계 / 

	코드에서 두모듈간의 연결 /일반적으로 둘 중 하나가 다른 하나를 어떤 용도를 위해 사용
10. Polymarphism 
	하나의 인터페이스로 다양한 구현을 제공 - 효율성 증대 
	여러개의 클래스가 같은 메시지에 대해서 각자의 방법으로 작용할 수 있는 능력. 
	ex) 마우스 사용법알면 삼성,중국산,엘지 마우스 쓸 수 있음 
11. Encapuslation 
	(=캡슐화) - 클래스 내부정의에 대해 외부에서 볼 수 없도록 하는 것이 특징, 내부의 속성과 구현은 볼 수 없게 함 
			캡슐화는 외부의 부정적인 방법으로 사용하는것을 방지 

변수; 인스턴스 변수, 클래스 변수, 지역변수
	클래스변수는 static ,언제라도 바로사용 ex)"클래스이름.클래스변수"
	용도; 이스턴스에 따라서 변하지 않는 값이 필요한 경우,
		인스턴스를 생성할 필요가 없는 값을 클래스에 저장하고 싶은경우 
		값의 변경사항을 모든 인스턴스가 공유해야 하는 경우 	
	ex)카드 가로세로 길이 같아야함 

	인스턴스변수는 인스턴스 생성후 사용가능 (왜?인스턴스 마다 서로 다른'상태' 가져야하기 때문

	지역변수는 메서드 내에서만 사용가능, 메서드가 종료되면 지역변수 사용할 수 없음 

메서드; function(기능) 이다, 어떤 작업을 수행하기 위한 명령문의 집합 
	변수(필드)가 물체의 상태라면, 메소드는 물체의 행동! 명령이라고 할 수 있음 
	void channelUp() { ++ channel;} = 메서드 




	기타용어정리 

API	; Application Programming interface
JRE	; Java Runtime Environment
JVM	; Java Virtual Machine
Bean	; 
call by value ; primitive 동작방식 -"값"을 가지고 있고 
call by reference ; reference 동작방식 - "주소값"을 가지고 있음 
CSV ; coomma seperate value -한칸씩 띄어 쓰는것 ex) 010-2232-1143
인자 ; = argument 
hierarchy; 상속관계를 트리 클래스로 나타낸것. 
interface ; 추상메소드와 파이널 변수로만 이루어진 클래스, 즉 인터페이스 내에 정의된 메소드는 자바에 의해 자동으로 'public abstract'로 변수는 자동으로 public static final로 선언된다. 구현이 이루어지지 않은 추상메소드를 포함하고 있는 인터페이스는 객체 생성을 할 수 없다. 클래스가 인터페이스를 구현해주어야 상속이 가능하다 . 이 때 클래스는 인터페이스의 모든 메소드 및 변수들을 상속하게 되며, 인터페이스에 정의되어 있는 모든 메소드를 구현해 주지 않을 경우 이 클래스는 추상메소드를 포함하고 있으므로 추상클래스로 선언되어야 한다. 
overloading ; 하나의 이름으로 여러 개의 메서드를 가지고 있다. 즉 같은 이름을 가진 여러 개의 메서드를 말한다.
	*같은 이름의 메소드를 여러개 정의하는 것 
	*매개변수의 타입이 다르거나 개수가 달라야 한다 
	ex)현대 기아 대우 엑셀기능 모두 같은것
	*다형성 지원하기 위한 수단 
	*하나의 클래스 폴리모피즘 
	같은 이름의 메소드를 여러 개 가지면서 매개변수의 유형과 개수가 다르게 하는것
overliding ; api에 만들어진 메서드를 가져와 쓰는것 
	*상속에서 나온 개념 
	*상위 클래스의 메소드를 하위클래스에서 재정의 
	ex)엑셀 을 발로 밟는데 버튼기능을 하나 만들어주는것 
	*여러개의 클래스 폴리모피즘 
	상위 클래스가 가지고 있는 메소드를 하위 클래스가 재정의 해서 사용 
call by value ; 값에 의한 호출 
call by reference ; 참조갑에 의한 호출 
append ; 추가
refactoring ; 다시보기
primitive datatype 초기화는 0 으로 된다 
식별성 ; ex)도라에몽아 모니터를 봐라 / 왜 옆에 모니터 있는데 자기 모니터 보는거지?
상태 ; 점심전에 배가고팠지만 지금은 배부름 
행위 ; 어떤 해위를 통해 변하게 되는게 있다 
class ; rw에 존재하는 객체의 상태(state)와 행위(behavior)를 표현한것 
	*사용하려고 만드는것 

instance ; 사용하려고 하는것 
	*일종의 추상 클래스 
	*추상메서드와 상수만을 멤버?로 갖는다 
	*Implements 키워드를 사용 
	*상속의 관계가 없는 클래스간 서로 공통되는 로직을 구현하여 쓸 수 있도록 한다 
	*Extends는 하나의 클래스만 상속 가능하나 Interface는 다중 상속이 가능 
.(닷) ; reference에 접근하기 위한 키워드 
bean ; rw를 추상화해서 object modeling 해 자바의 syntax로 표현  
camel case ; 대문자로 시작하는것 ; Class 
cmd ; console, 도스창 - .키워드 ; current / ..키워드 ; 상위폴더 
정적 모델링(static) +동적 모델링(dynamic) ==> object modeling 
정적 ex) 환자 /동적 ex) 환자가 입원한 일 수 
객체지향 ; rw를 표현하는 테크닉 
classpath ;클래스 경로 
default ;현재폴더에서 찾는 기본값 ex) 정수 ; int / 실수 double 
syntax ; 행위시키고 결과를 확인할 수 있는것 
open sourse ; 자신의 도메인 거꾸로 해놓은것
JRE = JVM + API 
package ; 자바에서 . 
++++++ ; . . . .
Servlet ;  container가 이해할 수 있게 구성된 순수 자바 코드로만 이루어진것 
JSP(java server page) ; html 기반에 java코드를 블록화하여 삽입한 것 
JDBC(java data base conection) ; 자바언어를 통해 데이터 베이스에 접근 할 수 있는 프로그래밍 의미 
Static ; 클래스가 로딩될 떄, 메모리 공간을 할당하는데 처음 설정된 메모리 공간이 변하지 않음을 의미 
	*객체를 아무리 많이 만들어도 해당 변수는 하나만 존재 
Framework ; 특정 형태의 소프트웨어 문제를 해결하기 위해 상호 협력하는 클래스프레임과 인터페이스 프레임의 집합 
	*특정한 틀을 만들어놓고 거기에 살을 붙여 놓음으로써 프로그램을 만들어 작업시간을 줄여줌 
	*특정 개념들의 추상화를 제공하는 여러 클래스나 컴포넌트로 구성
	*추상적인 개념들이 문제를 해결하기 위해 같이 작업하는 방법을 정의 
	*컴포넌트들은 재사용 가능 
	*좀더 높은 수준에서 패턴 조작 
garbage collection ; 시스템에서 더이상 사용하지 않는 동적 할당된 메모리 블럭을 찾아 자동으로 다시 사용 가능한 자원으로 회수 하는것 
	*시스템에서 가비지컬렉션을 수행하는 부분 
jar(java archive files) ; 자바 프로젝트압축 파일 , beans의 묶음 
uml(unified modeling language) ; 시스템을 모델로 표현해주는 모델링 언어 
collection ; 모임,자료구조 

ide ; integrated development enviroment 
getter; 변수값을 가져오는 메소드 
setter; 변수값을 설정하는 메소드 
parameter ; =인자 = argument
아스키코드 ; 영문알파벳사용하는 대표적인 문자인코딩 
유니코드 ; 전세계 모든문자를 컴퓨터에 일관적으로 표현 
protocol ; 규약 
application protocol ; 앱내에서의 규약 
interface 기반 프로그램 ; 하나의 시스템을 구성하는 2개의 구성 요소(하드웨어, 소프트웨어) 또는 2개의 시스템이 상호작용할 수 있도록 접속되는 경계(boundary), 이 경계에서 상호 접속하기 위한 하드웨어, 소프트웨어, 조건, 규약 등을 포괄적으로 가리키는 말
EOF ; End Of File - 데이터소스로부터 더이상 읽을 수 있는 데이터가 없음을 나타냄. ex) -1나오면 더이상 읽을게 없어서 종료됨
process ; 실행중인 프로그램 
multi - queue ; queue 가 여러개있는데 이어져있음 
local정보 ; local
was ; web application server
container ; 관리하고 실행시켜줌 
toString ; 객체가 가지고 있는 정보나 값들을 문자열로 만들어 리턴하는 메소드 

OGNL ; 객체에 접근하기 위한 언어

형상관리 ; 프로젝트를 관리하고 변경사항을 체계적으로 추적하고 통제 , 

pojo ; plain old java object 프레임워크 제거해도 기존코드 수정없이 쓸수 있게 하는것 디커플링! 

crud ; create read update delete 기초적인 4가지 쿼리 형식 
create로 표에 데이터 생성 read로 표의 데이터 읽고, update 새로운 데이터를 표에 업데이트 
delete로 표의 데이터 삭제 
singleton pattern ; 
fqcn (fully Qualified Class Name); 클래스가 속한 패키지명을 모두 포함한 이름 
ex) java.lang.String s=new java.lang.String();

AOP 용어 정리 

core concern; 내가 해야할 핵심적인것
cross-cutting concern ; core concern을 도와주는 부가기능
위2개를 보완하기 위해 AOP를 사용 oop의 경우 위 2개의 기능이 부족함 

Advice (충고); 언제 공통 관심기능을 핵심로직에 적용할지 정의. '메서드를 호출하기 전'(when)에' 트랜잭션
시작. '
Target클래스에 조인 포인트에 삽입되어져 동작 할 수 있는 코드를 '어드바이스'
관점으로서 분리되고 실행시 모듈에 위빙된 구체적인 처리를 aop에서는 advice라고함 
advice를 어디에서 휘빙하는지는 뒤에 나오는PointCut이라는 단위로 정의 
Advice가 위빙되는 인스턴스를 '대상객체'
advice는 Pointcut에서 지정한 Jointpoint에서 실행되어야하는 코드 

JointPoint(결합점)
Advice를 적용 가능한 지점을 의미, 메서드 호출, 필드 값 변경등이 Jointpoint에 해당 
클래스의 '인스턴스 생성시점', '메소드 호출시점', '예외 발생 시점' 과 같이 앱을 실행할 때
특정 작업이 시작되는 지점 '조인포인트'
실행시의 처리 플로우에서 Advice를 위빙하는 포인트를 JointPoint.
구체적으로 메서드호출이나 예외발생이라는 포인트를 jointpoint
인스턴의 생성시점, 메소드를 호출하는 시점, Exception이 발생하는 시점과 같이 앱이 실행될
때 특정작업이 실행되는 시점을 의미 

Pointcut(교차점)
jointpoint 부분 집합으로서 실제로 Advice가 적용되는 Jointpoint를 나타냄 .
스프링에서는 정규 표현식이나 AxpectJ문법을 이용하여 Pointcut정의 할 수 있음 .
여러 개의 조인포인트를 하나로 결합한 것을 포인트 컷이라고 함 
하나 또는 복수의 Jointpoint를 하나로 묶은 것을 Pointcut이라고 함.Advice의 위빙
정의는 Pointcut을 대상으로 설정. 하나의 Pointcut에는 복수 Advice를 연결할 수 있다.
반대로 하나의 Advice를 복수 Pointcut에 연결하는 것도 가능 
Pointcut은 Joinpoint들을 선택하고 결합점의 환경정보를 수집하는 프로그램의 구조물 
Target클래스와 Advice가 결합(Weaving)될 떄 둘 사이의 결합 규칙을 정의 

Weaving(엮기)
advice를 핵심 로직 코드에 적용하는것. (분리한 관점을 여러 차례 모듈에 삽입하는 것을
Aop에서는 위빙(weaving)이라고 부른다) 즉 공통 코드를 핵심 로직 코드에 삽입하는 것이 
weaving이다. 어드바이스를 핵심 로직 코드에 삽입하는것을 위빙이라고 한다 
Aspect를 target객체에 제공하여 새로운 프록시 객체를 생성하는 과정을 말한다 

Aspect(에스펙트 = 충고 + 교차점)
여러 객체에 공통으로 적용되는 공통 관심사항을 Axpect라고 한다. 트랜잭션이나 보안등이 
Aspect의 좋은 예이다 . 여러 객체에 공통으로 적용되는 공통 관점 사항을 에스펙트라고 한다.
레스펙트는 AOP의 중심단위, advice와 pointcut을 합친 것이다 

Target(대상)
핵심 로직을 구현하는 클래스 
충고를 받는 클래스를 대상(target)이라고 한다. 대상은 니가 작성한 클래스는 물론, 별도의
기능을 추가하고자 하는 써드파티 클래스가 될 수 있다 

Advisor

어드바이드와 포인트컷을 하나로 묶어 다루는 것을 어드바이저라고 한다. 어드바이저는 스프링
aop에만 있는 것인데, 관점 지향에서 관점을 나타내는 개념 

proxy
타겟 객체에 어드바이스가 적용된 후 생성된 객체 
즉 타겟 객체에 대한 호출을 가로챈 다음 어드바이스의 부가기능 로직을 수행하고 난 후에 타겟의
핵심기능 로직을 호출 - 전처리 어드바이스
또는 타겟의 핵심기능 로직 메서드를 호출한 후에 어드바이스를 수행하는 경우도 있음 

