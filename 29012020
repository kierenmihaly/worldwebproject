29012020


//클래스 예제 01
//자동차 클래스를 만들어보자
//자동차의 정보는 뭐가 있을까?
//모델, 연식, 색상, 등록번호
//type, age, color, plateNumber
//자동차의 기능은?
//액셀, 정지, 주차, 노래틀기

public class Car {
  //먼저 필드부터
  //필드는 데이터타입 필드명으로 적어준다

  //접근제한자(Access Modifier)
  //접근제한자란, 해당 필드나 메소드가 어디서 접근이 가능한지
  //설정해주는 예약어

  //접근제한자는
  //public - default(protected) - package - private
  //단계가 있다.
  //public : 어디서든지 접근 가능(외부 패키지도 가능)
  //protected : 같은패키티 혹은 상속받는 클래스들이면 접근 가능
  //아무것도 안 적어주면 자동으로 해당 접근제한자가 걸림
  //package : 같은 패키지 내부에서만 접근 가능
  //private ; 자기 자신외에는 접근 불가

  //예전에는 필드를 퍼블릭이나 디폴트로 아무런 변경
  //안해주던게 표준이였다.

  //하지만 데이터의 무결성 그리고 캡슐화 라는 개념이 나옴으로써
  //모든 필드를 프라이빗으로 설정해주는게 표준이 되었따 .

  private String type;
  private int age;
  private String color;
  private String plateNumber

  //근데 필드를 프라이빗 하면?
  //외부 클래스에서 객체를 만들고 그 객체에 값을
  //직접 넣어줄 수 없게 된다
  //그러면 어떻게 값을 넣어줘야 될까?
  //이제는 메소드를 통해서 값을 저장하거나 불러오게 하는거다
  //요러한 값을 주고 받는 메소드를 겟터/셋터 라고 부르고
  //이러한 겟터/셋터를 만드는 것을 캡슐화라고 한다

  //겟터는 객체에 저장되어 있는 값을
  //호출된 곳으로 보내주는 메소드이다.
  //겟터는
  //public 필드데이터타입 get필드명() {
  //return 필드명;
  //}
  //으로 만들어준다 

  public String getType() {
    return type;
  }

  //setter는 외부에서 값을
  //객체 내부에 저장을 할 때 호출된다
  //셋터는
  //public void set 필드이름 (필드데이터타입 필드명) {
  this.필드명 = 필드명;
  // }

  public void setType(String type) {
    this.type = type;
  }

  //파라미터를 그냥 써주면은 파라미터가 좀더 우선순위가 높다 여기서
  //파라미터는 코발트 파란색 type을 말한다
}
