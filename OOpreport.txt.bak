OOpreport.txt

1.OOP(Object Oriented Programming)- 객체지향 프로그래밍 
	현실세계의 사물을 추상화하고 캡슐화하며, 계층구조는 상속시키며, 부모와 다른 자식의
	특성, 행위는 다형성으로 구현하는것, 객체의 구성으로 프로그램을 만들어 
	나가는것을 객체지향 프로그래밍이라고 함 
2.Object
	현실세계를 표현하는 대상, 식별성을 가짐, 구체적인 사물도있고, 추상적일 수도있다.
	*클래스를 실제 사용할 수 있도록 변수 선언한 것을 인스턴스고 , 이 인스턴스를 객체라 할 수 있다.
	*ex) 기차역에서 승차권을 발매하는 경우, 실체인 '손님'과 동작인 '승차권 주문' 은 하나의 객체이며, 실체인 '역무원'과 동작인 '승차권 발매'도 하나의 객체 
3.Class
	유사한 특징을 지닌 객체들의 속성을 묶어 놓은 집합체 .
	구체적 일반적으로 만들 수 있다. 
	예를들어 코끼리, 원숭이, 사자 등의 특성을 공통된 분모로 하나로 묶어주는것.
	동물이라고 할 수 있다.
	더 나아가 정의된 클래스로부터 하나의 실례를 만드는것을 '객체 또는 인스
	턴스를 생성한다'

4. abstraction 
	추상화 
	
	
5_1. Generalization 
	is a /사람은 동물이다 
	Super class의 특성을 sub class가 상속받는다는 특성을 "일반화"
5_2. Inheritance
	*객체지향 개념은 클래스를 이용하여 다른 클래스를 생성 또는 정의할 수 있다. 하위 클래스는 상위클래스가 갖고있는 모든 특성들을 상속하여 사용할 수 있다. 이러한 상속 관계를 트리로 나타낼 수 있고, 이 상속관계 트리를 클래스 계층도 hierarchy라고 한다. 상속의 장점은 상위클래스는 하위클래스들이 가질 수 있는 일반적인 상태와 행동을 정의하고, 하위클래스는 하위클래스 만이 갖는 특별한 상태와 행동을 정의하도록 함으로써 상위클래스를 여러 하위클래스들이 재사용할 수 있다. 
	(= 재 사용성, 확장) 상위 클래스에 정의한 속성을 재사용, 확장하혀 개발속도 개선 
6. Specilaization
	상속받으면서 부모의 기능에다가 기능을 추가시키며 세분화 
7. Realization
	is a/ a사제품은 k회사 제품 

	인터페이스 상속, 구현 (implement 키워드)
8. Association 
	*has a 중요한관계 / ex)여자친구, 남자친구 
	연관관계 - 클래스로 생성된 객체간의 연관관계 다른 클래스의 변수나 메소드  혹은 객체를 참조 표현하고자할 경우 
	role name 사용 
9. dependency 
	*사용의 관계 / ex)강의하다를 하면서 보드마카로 판서하는중. 강의하는 행동이 끝나면 보드마카 놓고 집에감 
	필요에의해서 쓰고 버리는 관계 / 

	코드에서 두모듈간의 연결 /일반적으로 둘 중 하나가 다른 하나를 어떤 용도를 위해 사용
10. Polymarphism 
	하나의 인터페이스로 다양한 구현을 제공 - 효율성 증대 
	여러개의 클래스가 같은 메시지에 대해서 각자의 방법으로 작용할 수 있는 능력. 
	ex) 마우스 사용법알면 삼성,중국산,엘지 마우스 쓸 수 있음 
11. Encapuslation 
	(=캡슐화) - 클래스 내부정의에 대해 외부에서 볼 수 없도록 하는 것이 특징, 내부의 속성과 구현은 볼 수 없게 함 
			캡슐화는 외부의 부정적인 방법으로 사용하는것을 방지 






	기타용어정리 

API	; Application Programming interface
JRE	; Java Runtime Environment
JVM	; Java Virtual Machine
Bean	; 
call by value ; primitive 동작방식 -"값"을 가지고 있고 
call by reference ; reference 동작방식 - "주소값"을 가지고 있음 
CSV ; coomma seperate value -한칸씩 띄어 쓰는것 ex) 010-2232-1143
인자 ; = argument 
hierarchy; 상속관계를 트리 클래스로 나타낸것. 
interface ; 추상메소드와 파이널 변수로만 이루어진 클래스, 즉 인터페이스 내에 정의된 메소드는 자바에 의해 자동으로 'public abstract'로 변수는 자동으로 public static final로 선언된다. 구현이 이루어지지 않은 추상메소드를 포함하고 있는 인터페이스는 객체 생성을 할 수 없다. 클래스가 인터페이스를 구현해주어야 상속이 가능하다 . 이 때 클래스는 인터페이스의 모든 메소드 및 변수들을 상속하게 되며, 인터페이스에 정의되어 있는 모든 메소드를 구현해 주지 않을 경우 이 클래스는 추상메소드를 포함하고 있으므로 추상클래스로 선언되어야 한다. 
overloading ; 하나의 이름으로 여러 개의 메서드를 가지고 있다. 즉 같은 이름을 가진 여러 개의 메서드를 말한다.
	*같은 이름의 메소드를 여러개 정의하는 것 
	*매개변수의 타입이 다르거나 개수가 달라야 한다 
	ex)현대 기아 대우 엑셀기능 모두 같은것
	*다형성 지원하기 위한 수단 
	*하나의 클래스 폴리모피즘 
overliding ; api에 만들어진 메서드를 가져와 쓰는것 
	*상속에서 나온 개념 
	*상위 클래스의 메소드를 하위클래스에서 재정의 
	ex)엑셀 을 발로 밟는데 버튼기능을 하나 만들어주는것 
	*여러개의 클래스 폴리모피즘 
call by value ; 값에 의한 호출 
call by reference ; 참조갑에 의한 호출 
append ; 
refactoring ; 
primitive datatype 초기화는 0 으로 된다 
식별성 ; ex)도라에몽아 모니터를 봐라 / 왜 옆에 모니터 있는데 자기 모니터 보는거지?
상태 ; 점심전에 배가고팠지만 지금은 배부름 
행위 ; 어떤 해위를 통해 변하게 되는게 있다 
class ; rw에 존재하는 객체의 상태(state)와 행위(behavior)를 표현한것 
	*사용하려고 만드는것 

instance ; 사용하려고 하는것 
	*일종의 추상 클래스 
	*추상메서드와 상수만을 멤버?로 갖는다 
	*Implements 키워드를 사용 
	*상속의 관계가 없는 클래스간 서로 공통되는 로직을 구현하여 쓸 수 있도록 한다 
	*Extends는 하나의 클래스만 상속 가능하나 Interface는 다중 상속이 가능 
.(닷) ; reference에 접근하기 위한 키워드 
bean ; rw를 추상화해서 object modeling 해 자바의 syntax로 표현  
camel case ; 대문자로 시작하는것 ; Class 
cmd ; console, 도스창 - .키워드 ; current / ..키워드 ; 상위폴더 
정적 모델링(static) +동적 모델링(dynamic) ==> object modeling 
정적 ex) 환자 /동적 ex) 환자가 입원한 일 수 
객체지향 ; rw를 표현하는 테크닉 
classpath ;클래스 경로 
default ;현재폴더에서 찾는 기본값 ex) 정수 ; int / 실수 double 
syntax ; 행위시키고 결과를 확인할 수 있는것 
open sourse ; 자신의 도메인 거꾸로 해놓은것
JRE = JVM + API 
package ; 자바에서 . 
++++++ ; . . . .
Servlet ;  container가 이해할 수 있게 구성된 순수 자바 코드로만 이루어진것 
JSP(java server page) ; html 기반에 java코드를 블록화하여 삽입한 것 
JDBC(java data base conection) ; 자바언어를 통해 데이터 베이스에 접근 할 수 있는 프로그래밍 의미 
Static ; 클래스가 로딩될 떄, 메모리 공간을 할당하는데 처음 설정된 메모리 공간이 변하지 않음을 의미 
	*객체를 아무리 많이 만들어도 해당 변수는 하나만 존재 
Framework ; 특정 형태의 소프트웨어 문제를 해결하기 위해 상호 협력하는 클래스프레임과 인터페이스 프레임의 집합 
	*특정한 틀을 만들어놓고 거기에 살을 붙여 놓음으로써 프로그램을 만들어 작업시간을 줄여줌 
	*특정 개념들의 추상화를 제공하는 여러 클래스나 컴포넌트로 구성
	*추상적인 개념들이 문제를 해결하기 위해 같이 작업하는 방법을 정의 
	*컴포넌트들은 재사용 가능 
	*좀더 높은 수준에서 패턴 조작 
garbage collection ; 시스템에서 더이상 사용하지 않는 동적 할당된 메모리 블럭을 찾아 자동으로 다시 사용 가능한 자원으로 회수 하는것 
	*시스템에서 가비지컬렉션을 수행하는 부분 
jar(java archive files) ; 자바 프로젝트압축 파일 
uml(unified modeling language) ; 시스템을 모델로 표현해주는 모델링 언어 