OOpreport.txt

1.OOP(Object Oriented Programming)
	현실세계의 사물을 추상화하고 캡슐화하며, 계층구조는 상속시키며, 부모와 다른 자식의
	특성, 행위는 다형성으로 구현하는것, 객체의 구성으로 프로그램을 만들어 
	나가는것을 객체지향 프로그래밍이라고 함 
2.Object
	현실세계를 표현하는 대상, 식별성을 가짐, 구체적인 사물도있고, 추상적일 수도
	있다.
3.Class
	유사한 특징을 지닌 객체들의 속성을 묶어 놓은 집합체 .
	구체적 일반적으로 만들 수 있다. 
	예를들어 코끼리, 원숭이, 사자 등의 특성을 공통된 분모로 하나로 묶어주는것.
	동물이라고 할 수 있다.
	더 나아가 정의된 클래스로부터 하나의 실례를 만드는것을 '객체 또는 인스
	턴스를 생성한다'
4. abstraction 
	
	
5_1. Generalization 
	Super class의 특성을 sub class가 상속받는다는 특성을 "일반화"
5_2. Inheritance
	(= 재 사용성, 확장) 상위 클래으세어 정의한 속성을 재사용, 확장하혀 개발속도 개선 
6. Specilaization
	상속받으면서 부모의 기능에다가 기능을 추가시키며 세분화 
7. Realization
	인터페이스 상속 
8. Association 
	연관관계 - 클래스로 생성된 객체간의 연관관계 다른 클래스의 변수나 메소드  혹은 객체를 참조 표현하고자할 경우 
	role name 사용 
9. dependency 
	코드에서 두모듈간의 연결 /일반적으로 둘 중 하나가 다른 하나를 어떤 용도를 위해 사용
10. Polymarphism 
	하나의 인터페이스로 다양한 구현을 제공 - 효율성 증대 
11. Encapuslation 
	(=캡슐화) - 클래스 내부정의에 대해 외부에서 볼 수 없도록 하는 것이 특징, 내부의 속성과 구현은 볼 수 없게 함 
			캡슐화는 외부의 부정적인 방법으로 사용하는것을 방지 






	기타용어정리 

API	; Application Programming interface
JRE	; Java Runtime Environment
JVM	; Java Virtual Machine
Bean	; 