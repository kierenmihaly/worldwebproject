
11082020

2-3? 소프트웨어 패키징 

- 소프트웨어 패키징의 개요 - 묶는다. 모듈별로 실행파일 묶어서 배포용 설치파일 만드는거 , 사용자 중심 , 모듈화 패키징 다양한 환경에서 소프트웨어 쉽게 사용할 수 있도록 하는것
- 패키징 시 고려사항 - 운영체제, cpu, 메모리, 최소환경을 정의해야함 메뉴얼 잘 배포해야함, 고객편의 제공해줘야함, 다양한 사용자의 요구사항 반영해줘야함 개선사항 관리하는 체계 필요
- 패키징 작업 순서 - 2-4주 최종결과물

- **릴리즈 노트 - 사용자에게 제공하는 소프트웨어에 대한 정보, 최종 사용자들과 공유를 하기 위한 문서, 테스트, 사양에대한 걸 개발팀이 준수를 했는지, 소프트웨어 기능, 서비스, 개선사항 등을 사용자들과 공유하기위한것 즉 최종사용자인 고객과 공유하기 위한 문서**

- 릴리즈 노트 초기 버전 작성 시 고려사항 - 정확하고 완전한 정보를 기반으로 작성해야함
    - 머리말, 개요, 목적, 문제 요약, 재현항목, 수정/개선 내용, 사용자 영향도, 소프트웨어 지원 영향도, 면책 조항, 연락처
    - 릴리즈 노트 추가 버전 작성시 고려사항
    - 버그과정,  업그레이드, 사용자 요청사항, 오류 - 긴급수정 - 버전 출시

    - 릴리즈 노트 작성 순서
        - 모듈식별-릴리즈 정보확인- 릴리즈 노트 개요작성- 영향도 체크- 정식릴리즈 노트작성- 추가개선 항목식별

    디지털 저작권 관리

    - 저작권의 개요 - 독점적권리 ,타인의 침해 엑스
    - 디지털 저작권관리 (DRM) - Digital Right Management
    - 디지털 저작권 관리의 흐름도
        - 클리어링(깨끗하게한다, 디지털 저작권 라이선스의 중개 및 발급을 수행하는곳,저작권료의 정산 및 분배가 수행) 하우스, 콘텐츠 제공자, 패키저
        - 콘텐츠 분배자, 콘텐츠 소비자, drm 컨트롤러, 보안컨테이너
    - 디지털 저작권 관리의 기술 요소
        - 암호화, 키 관리, 암호화 파일 생성, 식별 기술, 저작권 표현, 정책 관리, 크랙 방지, 인증

    소프트웨어 설치 매뉴얼 - 설치하는 과정에 필요한 모든것을 적어놓은 매뉴얼임 사용자 기준으로 , 시작부터 완료까지 매뉴얼을 다 적어놓고 오류메세지나 예외상황들도 기술이 다되어야 함!! 

    - 소프트웨어 설치 매뉴얼의 개요
    - 서문
        - 문서 이력, 설치 매뉴얼의주석(주의사항,참고사항), 설치도구의 구성, 설치 환경 체크 항목
    - 기본 사항
        - 소프트웨어 개요, 설치 관련 파일, 설치 아이콘, 프로그램 삭제, 관련 추가정보
    - 설치 매뉴얼 작성 방법 - 설치과정 - 이해 - 설치화면 - 캡처 순서대로
        - 설치화면, 설치이상 메시지 설명, 설치 완료 및 결과 , FAQ
        - 설치 시 점검 사항, 네트워크 환경 및 보안, 고객 지원방법, 준수 정보 & 제한 보증
    - 설치 매뉴얼 작성 순서
        - 기능 식별 → ui분류 →설치파일확인 →Unistall절차확인 →이상case확인 → 최종 매뉴얼 적용

    소프트웨어 사용자 매뉴얼 - 사용하면서 필요한 설명서

    - 소프트웨어 사용자 메뉴얼의 개요 - 업그레이드 위한 메뉴얼 버전관리 , 컴포넌트(=독립적인 기능 수행하는 단위,하나의 모듈이라고 생각해도됨) 단위로 메뉴얼을 작성
    - 서문
        - 문서 이력, 설치 메뉴얼의 주석, 기록 보관 내용
    - 기본 사항
        - 소프트웨어 개요(기능), 소프트웨어 사용 환경, 소프트웨어 관리, 모델버전별 특징, 기능 인터페이스 특징(제품에 대한 기능 ,인터페이스에 대한 특징) , 소프트웨어 구동 환경
    - 사용자 매뉴얼 작성방법
        - 사용자화면, 주요기능 분류, 응용 프로그램 및 설정(같이 실행해야하거나 같이 실행하면 안되는 프로그램 설명), 장치 연동(특정한 장치에 연동되어 있는거 기술), 네트워크 환경(네트워크가 필수적인 프로그램 설정값 설명), profile안내(구동환경점검), 고객지원방법(기술적인지원안내, 이메일이나 전화번호 등), 준수정보 제한 보증(저작권자 소유권정보등 안내)
    - 사용자 매뉴얼 작성 순서

        >기능식별 → 사용자화면분류(메뉴별로 분류) →사용자 환경 파일 확인 →초기화 절차 확인 →이상case확인 →최종 매뉴얼 적용(faq) 

    - 국제 표준 제품 품질
        - 제품 품질 표준 ; 측정기준제시, 기능성,신뢰성,사용성,신뢰성, 이식성등을 판단 iso/iec 14598 - 소프트웨어 제품평가 프로세스, 평가오류
        - 12119 - 패키지 소프트웨어 품질 등
        - 프로세스 품질 표준 ; 9000- 품질경영, 보증 [//12207](//12207) - life cycle 프로세스 [//155054](//155054) - 표준모델 // 15288- 시스템 생명주기

        12119 - 제품 설명서 시험(요구,권고사항) - 사용자 문서 지침(완전성, 정확성, 일관성, 이해성) → 실행 프로그램 시험 (프로그램, 데이터) → 시험기록 → 시험 보고서 작성 

        14598 - 반복성(특정한 제품을 동일한 평가자가 동일한 사양을 가지고 평가를 하면 동일한 결과가 나와야한다), 재현성(다른 평가자가 한다고 해도 유사한 결과가 나와야한다), 공정성(편향되어 나오면 안됨), 객관성 - 객관적 !!

    소프트웨어 버전 등록

    - 소프트웨어 패키징의 형상 관리; 소프트웨어변경사항 - 관리 - 활동
    - 형상관리의 중요성 - 소프트웨어의 변경사항을 추적하고 통제 가능, 무절제한 변경 방지
    - 형상 관리 기능
        - 형상 식별, 버전 제어, 형상 통제(변경요구 검토, 변경관리), 형상 감사, 형상 기록(기록관리)
    - 소프트웨어의 버전 등록 관련 주요 용어
        - **저장소**(최신버전파일,변경내역 저장), 가져오기(파일복사), **체크아웃**(저장소에서 파일받기), 체크인(저장소에 파일 업데이트), 커밋(이전버전과의 충돌을 알림, 수렴해서 업데이트 완료), **동기화**(최신버전 작업공간을 동기화)
    - 소프트웨어 버전 등록 과정
        - 가져오기 → 인출 → 예치 → 동기화 → 차이 (수정기록확인, 이전개발파일과 이후개발파일확인과정)

    - 소프트웨어 버전관리 도구 - 제품소프트웨어의 신규 개발, 변경, 개선과 관련된 수정 내역을 관리하는 도구
    - 소프트웨어 버전관리 도구 유형
        - 공유 폴더 방식 -초기; 개발완료된 파일은 공유폴더에 복사시키기
        - 클라이언트/서버 방식 -최근
        - 분산 저장소 방식 -최근 ;중앙저장소에 저장하는 순간 개발자 컴터에도 그대로 생성됨

    소프트웨어버전관리 도구

    - 소프트웨어 버전관리 도구별 특징 svn, git
        - svn - 개별 > 단점개선 표준으로 사용
        - svs - 서버 클라리언트 다수인원 동시에 운영체제 접근가능
        - git -오픈소스 ; 속도 분산형 대형프로젝트
        - rcs -소스파일수정 1사람제한 , 여러사람 수정할 수 없도록 잠금
        - bitkeeper - 대규모, 빠른속도
        - Clear Case - IBM, 복수서버, 복수클라이언트(서버가 부족하면 하나씩 추가가능)

    소프트웨어버전관리 도구

    - 소프트웨어 버전관리 도구 사용 시 유의점
        - 형상관리 지침에 의거 버전에 대한 정보를 언제든지 접근 가능하여야함
        - 개발자, 배포자 이외에 불필요한 사용자가 소스 접근할 수 없도록 해야함
        - 동일한 프로젝트 파일에 대해서 여러 개발자가 동시 개발할 수 있어야함
        - 에러 발생 시 최대한 빠른시간 내에 복구 필요

        - 제품소프트웨어 소프트웨어 버전관리 도구 활용방안
        - 공동개발및 작업관리 - 2명이상 개발자가 수정 가능하여야함
        - 버전 백업 및 복구 - 이전버전
        - 여러 버전 솔루션 작업

        빌드 자동화 도구

        - 소프트웨어 빌드 자동화 도구 개요

            >소프트웨어 빌드 자동화 도구 ; 저장소에 있는 소스를 자동으로 읽어서 빌드를 하여 실행 파일을 만드는 도구 , 수업이 반복해서 최종 결과물을 만들어내는것! 

        - 온라인 빌드 자동화 도구, 젠킨스
            - 빌드 자동화 도구로서 가장 많이 활용되는 도구
            - 지속적 통합관리를 가능하게함, 다양한 버전관리 도구를 지원
            - 임의의 쉘 스크립트와 윈도우 배치 명령까지 실행시킬 수 있다. - 쉬운설치, 친숙한 gui, 저장소부하감소, 실시간 피드백 , 서드파티플러그인→통합 개발도구 이크립스 테스트도구 junit과도 통합가능
        - 빌드 자동화 도구
            - 안드로이드 환경에 적합한 도구, 그래들

    애플리케이션 테스트 - 잠재되어있는 결함을 찾아내는 행위, 고객요구확인, 소프트웨어 기능 수행 검증 

    - 애플리케이션 테스트 필요성
        - 프로그램이 실행전 오류 발견 예방, 반복적 test →제품의 신뢰도 높임, 오류발견-오류유입등을 예방
    - 애플리케이션 테스트 기본 원리

        잠재적 결함을 줄일수 있음 , 근데 증명할 순없다, 왜냐면 모든지 완벽한 소프트웨어는 없다. 결함은 특정모듈에 집중되어있음. 일반적으로 20% 앱에서 전체 80% 결함이 발견된다 - 파레토 법칙.

        결함을 제거했음에도 불구하고 사용자 요구 만족을 못할경우 ⇒ 품질이 높다고 말할 수 없다 - 오류 부재의 법칙

        테스트위험 반비례, 테스트는 작은부분부터 진행해야함 

    애플리케이션 테스트분류

    - 프로그램 실행 여부에 따른 테스트
        - 정적테스트 → 실행 안하고 테스트, 소스코드를 대상으로 테스트, 초기에 결함을 발견할 수 있어서 비용낮추는데 도움됨.

            워크스루, 인스펙션, 코드검사 등이 있다

        - 동적테스트 → 실행해서 오류찾는형태, 소프트웨어개발모든단계, 블랙박스, 화이트박스
    - 테스트기반에 따른 테스트 - 무엇을?
        - 명세 기반 테스트 ; 요구→명세→빠짐없이 , 동등분할, 경계값분석
        - 구조 기반 테스트 ; 내부 논리적흐름에 따라
        - 경험 기반 테스트 ; 테스터 경험을 기반으로 테스트 수행, 사용자 요구사항 명세가 불분명, 테스트 시간제약이 있음. 이런경우에 사용하면 더 효과적
        - 시각에 따른 테스트 - 누구냐의 기준에 따라서 다름
            - 검증테스트 - 개발자 시각 , 제품이 명세서대로 만들어졌는지
            - 확인 테스트 - 사용자 시각 - 사용자 요구 제품이 완성되었는지
        - 목적에 따른 테스트
            - 회복테스트(결함-실패-복구), 안전테스트, 강도테스트(과도한 분량 부과생겨서 과부하 일부러 만듦)
            - 성능 테스트, 구조테스트(논리적경로, 소스코드의 복잡도), 회귀테스트(소프트웨어 변경,수정일어날떄 결함이 있는지 확인하는거)
            - 병행테스트(변경소프트웨어와 기존 소프트웨어에 똑같은 데이터 집어넣고 비교하는 테스트방식 )

    테스트 기법에 따른 애플리케이션 테스트 

    - 화이트박스테스트 - 논리위주의 테스트방식, 내부소스코드 테스트, 내부의 논리적 구조, 복잡도 테스트 하는방식, 원시코드의 모든 문장을 한번 씩 수행하면서 문제없는지 찾기. 많은시간 소요되지만 분석 자세히 해야하고 오류위치를 찾는데 활용됨

        기초경로검사 - 논리적복잡성 특정, 원시코드를 가지고 흐름도를 작성 - 논리적복잡도를 측정 

        순환복잡도 0→0 

    - 블랙박스 테스트 - 소프트웨어 동작 검사, 내부 볼수없음 , 입력출력값가지고 기능유효성 체크 , 기능에따라 입,출력이 정확하게 되고있는지, 무슨역할 하는지, 정상적으로 작동되는지 체크하는거고 이걸 기능검사라고 함. 동치분할검사 : 입력자료에 중점을 둬서 테스트함.  경계값에서 오류가 많이 발생이 되면 검사사례를 경계값으로 선정할 수 있음.

        원인효과그래프 - 입력 관계, 출력에 어떻게 영향을 미치는지 검사하는기법.

        오류예측검사 - 과거의 경험 

        비교검사 - 여러 버전 

     

    즉 화이트는 내부 볼 수 있고 블랙은 동작!

    개발단계에 따른 앱 테스트

    - 앱 테스트
    - 단위테스트 - 통합테스트- 시트템 테스트- 인수테스트 ⇒테스트레벨
    - v모델

        요구사항 분석 설계 구현  ㅣ 단위 통합 시스템 인수 

        (소프트웨어 개발단계) ㅣ  (테스트단계)

    - 단위테스트 - 코딩직후 모듈
        - 구조기반테스트(화이트박스), 명세기반테스트(블랙박스)
    - 통합테스트 - 결합
        - 비점진적 통합 방식 : 빅뱅 (모듈 - 전체)
        - 점진적 통합방식 : 하향식 통합테스트, 상향식통합테스트, 혼합식 통합테스트 , 스텁-하향식(시험용가짜모델), 드라이버-상향식
    - 시스템 테스트
        - 기능적 요구사항, 비기능적 요구사항
    - 인수테스트
        - 사용자 인수테스트(사용자가 직접 테스트하는거 , 문제없으면 사용자가 프로그램 인수!), 운영상의 인수 테스트(시스템운영자가 하는 거), 계약인수 테스트(계약인수,검수 규정하는거), 규정인수 테스트(정부지침 법규), 알파테스트(사용자가 개발자 앞에서 직접진행), 베타 테스트

    앱 테스트 과정(프로세스) - 소프트웨어가 사용자의 요구대로 만들어졌는가 

    - 앱 테스트 과정
        - **계획 →분석및 디자인 → 케이스,시나리오 작성 → 수행 → 결과평가 리포팅 → 결함추적 관리**
        - 테스트 계획서(테스트하는목적,범위,일정,절차,대상,책임), 테스트 케이스(입력값,실행조건,기대결과), 테스트시나리오(수행,동작순서), 테스트 결과서

    - 테스트 계획
        - 테스트 시작 조건 - 계획, 일정, 환경, 요구사항 명세서, 인력 역할, 책임
        - 테스트 종료 조건 - 테스트 완료, 일정 만료, 비용 소진

    앱테스트 프로세스

    - 테스트 분석 및 디자인 - 테스트 목적 원칙 검토 - 사용자 요구사항 분석
    - 테스트 케이스 시나리오작성 - 테스트 케이스 작성, 검토 확인, 시나리오 작성
    - 테스트 수행 - 테스트 환경 구축(회의를 한다고 했을때 회의 할 수 있는 환경이 무엇일까- 실제 시스템과 유사하거나 동이한 하드웨어 소프트웨어 네트워크 시설을 구축해 놓는걸 말함 예를들어 리허설 처럼 ) , 테스트수행
    - 테스트 결과 평가 리포팅 - 비교분석 작성 , 결함기록
    - 결함추적 관리 - 에러발견, 에러등록, 에러분석, 결함확정, 결함 할당, 결함 조치, 조치 검토및 승

    테스트 케이스/테스트시나리오 //테스트 오라클

    - 테스트 케이스 - sw가 사용자 요구사항을 준수했는지 확인하기 위해 설계된 입력값, 실행조건, 기대결과 항목에대한 명세서, 테스트 오류를 줄일 수 있고, 인력,시간도 줄일수 있음 가장 이상적인 케이스 설계를 하려면 시스템 설계할 때 작성하는게 좋다.
    - 테스트 케이스 작성 순서
        1. 테스트 계획 검토 우선순위 결정 - 재검토, 범위, 접근방법, 위험 평가 및 우선 순위 결정 위험정도, 초점