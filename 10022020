주석
//주석이란 우리가 코드에 설명을 적는 칸으로서
//앞에 //를 붙여준다
//그러면 해당 줄은 실제 컴파일 단계에서 무시가 된다
//여러 줄을 주석으로 만들떄에는
// /*로 시작해서 */로 끝낸다

/*
이렇게
*/

//자바에는 2가지 오류의 자료형 data type이 있다
//기본형과 참조형이 있다

//기본형은 해당 주소에 값이 저장되어 있는 형태 -->스택 영역
//참조형은 해당 주소에 값이 아니라, 값들이 저장되어 있는 주소로 갈 수 있는
//주소값이 저장되어 있따 --> 힙 영역

//기본형에는 8가지 자료형이 있다
//byte short int long float double char boolean
//byte, short, int, long ; 정수형 데이터 타입
//8 , 16, 32, 64 비트
//float, double ; 실수형 데이터 파일
//자릿수가 적은 실수, 자릿수가 큰 실수
char; 문자형 데이터타입
문자 1개
boolean ; 참/거짓 데이터타입
//ture/false

//변수란? 해당 공간의 값이 바뀔 수 있는 공간을 뜻한다
//변수를 선언할 때에는 해당 공간의 종류 공간의 이름을 써주면 된다
//ex) int number;
//변수는 선언과 초기화를 해줘야한다
//위의 ex는 선언이고 값을 초기화 할때에는 number = 값; 으로 해주면 된다

public class ex01
        public static void main(String[] args) {
              int number;
              number = 5;
              System.out.println(number);
              number = 10;
              System.out.println(number);
              //선언과 초기화는 한줄로도 해줄 수 있다
              int number2 = 20;
              System.out.println(number2);

              //자로형을 내가 원하는 자료형으로 바꿔 줄 수 있다
              //이러한것을 형변환(type casting)이라고 한다

              //형변환에는 2가지가 있다
              //암시적 형변화(impicit type casting)과
              //명시적 형변환(explicit type casting)이 있다

              //암시적 형변환은 더 작은 데이터타입의 값을 더 큰 데이터타입으로
              //옮길때 실행된다
              number = 100;
              long myLong = number;
              //롱이 더큰 데이터타입 이기 때문에 number 를 롱으로 바꾸라고
              //명시해줄 필요가 없다

              //명시적 형변환은 더 큰 데이터타입의 값을 더 작은 데이터타입으로
              //변환될때 실행된다
              //명시적 형변환은 (바꿀 데이터타입)값 으로 해주게 된다

              //byte myByte = number; 에러가 난다
              byte myByte = (byte)number; //에러가 난다
              myByte = (byte)128;
              System.out.println(myByte);
              myByte = (byte)-129;
              System,out.println(myByte);
        }


//자바의 이름 규칙
1. 자바는 낙타등 표기법 (camel back notation) 을 따른다
//첫번째 단어는 모두 다 소문자, 두번째 단어부터는 첫글자만 대문자
//예 ; number, age, firstNumber, secondnumber

2. 클래스는 대문자로 시작하는 명사이다
//예 ; Ex, Scanner, String

3. 메소드는 소문자로 시작하는 동사
//예 pinrtln(print a line의 줄임말 ), main

//4. 변수는 소문자로 시작하는 명사
//예시 ; number2

//5. 상수는 모두다 대문자로 적어주고 단어 사이에는 _를 넣어준다
//예시 ; PI, UNIT_PRICE

//상수란? 해당 공간의 값이 처음 초기화된 값으로만 사용 가능한 공간
//상수는 final 이라는 단어를 붙여서 초기화 한다

//6.자바에서 시스템적으로 사용하기 위해 미리 정해놓은 예약어 36가지를 이름으로 쓸수 없다
//예약어들은 이클립스에서 보라색으로 표시해주는 단어들을 예약어라고 한다
//예시 ; public, class, int

//7.이름에 특수문자 쓰면 안된다
//예시 ; **&myNumber (x)

//8.한글로 이름을 지어줄 수는 있지만 절대 하면 안된다

//9. 단어를 적어줄 떄 더 이상 약어로 적어주지 않는다
//예시; num --> number    str --> string 으로 적어줘야 한다

//10. 변수명에 숫자가 포함될 수 있지만, 시작할때 숫자를 적어주면 안된다
//예시 ; number (o) //1number (x)


public class Ex02 {
          //상수 만들기
          static final int SIZE = 5;
          public static void main(String [] args) {

          }
          }

//연산자03 - 비교연산

public class Ex05 {
        public static void main(String[] args) {
              int number1 = 10;
              int number2 = 15;
              System.out.println(number1 > number2);
              System.out.println(number1 >= number2);
              System.out.println(number1 < number2);


              //하지만 비교연산자 중에서 ==와 != 는 클래스의 변수(객체)로
              //사용하면 정확한 값을 못 얻을수도 있따

              //String 이란 문자열을 뜻한다 (여러개의 문자가 모여있음 )
              String string1 = "abc";
              String string2 = new String("abc");
              System.out.println(string1);
              System.out.println(string2);

              //==을 써서 객체를 비교하면 스트링 객체의 문자열 값이 아닌
              //해당 객체들의 주소값을 비교하게 된다
              System.out.println(string1 == string2);
              //클래스 객체를 비교할 때에는
              //해당 클래스에 정의되어 있는 equals라는 메소드를 통해서
              //비교하여야 한다.
              //객체의 내부의 정의되어 있는 메소드를 접근할 떄에는
              //객체 메소드 이름으로 접근 해야한다.
              System.out.println(string1.equals(string2));
        }
}
